import { Inject, Injectable, InjectionToken } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';
import * as i0 from "@angular/core";
import * as i1 from "../store/configuration.store";
export const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');
export class NgxPermissionsConfigurationService {
    constructor(isolate = false, configurationStore) {
        this.isolate = isolate;
        this.configurationStore = configurationStore;
        this.strategiesSource = this.isolate ? new BehaviorSubject({}) : this.configurationStore.strategiesSource;
        this.strategies$ = this.strategiesSource.asObservable();
        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;
        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;
    }
    setDefaultOnAuthorizedStrategy(name) {
        if (this.isolate) {
            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
        }
        else {
            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;
        }
    }
    setDefaultOnUnauthorizedStrategy(name) {
        if (this.isolate) {
            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
        }
        else {
            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;
        }
    }
    addPermissionStrategy(key, func) {
        this.strategiesSource.value[key] = func;
    }
    getStrategy(key) {
        return this.strategiesSource.value[key];
    }
    getAllStrategies() {
        return this.strategiesSource.value;
    }
    getDefinedStrategy(name) {
        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {
            return name;
        }
        else {
            throw new Error(`No ' ${name} ' strategy is found please define one`);
        }
    }
    isPredefinedStrategy(strategy) {
        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;
    }
}
NgxPermissionsConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxPermissionsConfigurationService, deps: [{ token: USE_CONFIGURATION_STORE }, { token: i1.NgxPermissionsConfigurationStore }], target: i0.ɵɵFactoryTarget.Injectable });
NgxPermissionsConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxPermissionsConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxPermissionsConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [USE_CONFIGURATION_STORE]
                }] }, { type: i1.NgxPermissionsConfigurationStore }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXBlcm1pc3Npb25zL3NyYy9saWIvc2VydmljZS9jb25maWd1cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0scUNBQXFDLENBQUM7OztBQVN6RixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBR3JGLE1BQU0sT0FBTyxrQ0FBa0M7SUFPM0MsWUFDNkMsVUFBbUIsS0FBSyxFQUN6RCxrQkFBb0Q7UUFEbkIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDekQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFrQztRQUU1RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxlQUFlLENBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNwSCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV4RCxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsMkJBQTJCLENBQUM7UUFDbEgsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDZCQUE2QixDQUFDO0lBRTFILENBQUM7SUFFTSw4QkFBOEIsQ0FBQyxJQUFnQztRQUNsRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BFO2FBQU07WUFDSCxJQUFJLENBQUMsa0JBQWtCLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BGLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsMkJBQTJCLENBQUM7U0FDMUY7SUFDTCxDQUFDO0lBRU0sZ0NBQWdDLENBQUMsSUFBZ0M7UUFDcEUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0RTthQUFNO1lBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0RixJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDZCQUE2QixDQUFDO1NBQzlGO0lBQ0wsQ0FBQztJQUVNLHFCQUFxQixDQUFDLEdBQVcsRUFBRSxJQUFzQjtRQUM1RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM1QyxDQUFDO0lBRU0sV0FBVyxDQUFDLEdBQVc7UUFDMUIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxnQkFBZ0I7UUFDbkIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxJQUFnQztRQUN2RCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RFLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLHdDQUF3QyxDQUFDLENBQUM7U0FDekU7SUFDTCxDQUFDO0lBRU8sb0JBQW9CLENBQUMsUUFBZ0I7UUFDekMsT0FBTyxRQUFRLEtBQUssa0NBQWtDLENBQUMsSUFBSSxJQUFJLFFBQVEsS0FBSyxrQ0FBa0MsQ0FBQyxNQUFNLENBQUM7SUFDMUgsQ0FBQzs7K0hBM0RRLGtDQUFrQyxrQkFRL0IsdUJBQXVCO21JQVIxQixrQ0FBa0M7MkZBQWxDLGtDQUFrQztrQkFEOUMsVUFBVTs7MEJBU0YsTUFBTTsyQkFBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ3hQZXJtaXNzaW9uc1ByZWRlZmluZWRTdHJhdGVnaWVzIH0gZnJvbSAnLi4vZW51bXMvcHJlZGVmaW5lZC1zdHJhdGVnaWVzLmVudW0nO1xuaW1wb3J0IHsgTmd4UGVybWlzc2lvbnNDb25maWd1cmF0aW9uU3RvcmUgfSBmcm9tICcuLi9zdG9yZS9jb25maWd1cmF0aW9uLnN0b3JlJztcblxuZXhwb3J0IHR5cGUgU3RyYXRlZ3lGdW5jdGlvbiA9ICh0ZW1wbGF0ZVJlZj86IFRlbXBsYXRlUmVmPGFueT4pID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyYXRlZ3kge1xuICAgIFtrZXk6IHN0cmluZ106IFN0cmF0ZWd5RnVuY3Rpb247XG59XG5cbmV4cG9ydCBjb25zdCBVU0VfQ09ORklHVVJBVElPTl9TVE9SRSA9IG5ldyBJbmplY3Rpb25Ub2tlbignVVNFX0NPTkZJR1VSQVRJT05fU1RPUkUnKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neFBlcm1pc3Npb25zQ29uZmlndXJhdGlvblNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBzdHJhdGVnaWVzU291cmNlOiBCZWhhdmlvclN1YmplY3Q8U3RyYXRlZ3k+O1xuICAgIHB1YmxpYyBzdHJhdGVnaWVzJDogT2JzZXJ2YWJsZTxTdHJhdGVneT47XG4gICAgcHVibGljIG9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHB1YmxpYyBvblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVVNFX0NPTkZJR1VSQVRJT05fU1RPUkUpIHByaXZhdGUgaXNvbGF0ZTogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICBwcml2YXRlIGNvbmZpZ3VyYXRpb25TdG9yZTogTmd4UGVybWlzc2lvbnNDb25maWd1cmF0aW9uU3RvcmVcbiAgICApIHtcbiAgICAgICAgdGhpcy5zdHJhdGVnaWVzU291cmNlID0gdGhpcy5pc29sYXRlID8gbmV3IEJlaGF2aW9yU3ViamVjdDxTdHJhdGVneT4oe30pIDogdGhpcy5jb25maWd1cmF0aW9uU3RvcmUuc3RyYXRlZ2llc1NvdXJjZTtcbiAgICAgICAgdGhpcy5zdHJhdGVnaWVzJCA9IHRoaXMuc3RyYXRlZ2llc1NvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgICAgICB0aGlzLm9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuaXNvbGF0ZSA/IHVuZGVmaW5lZCA6IHRoaXMuY29uZmlndXJhdGlvblN0b3JlLm9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTtcbiAgICAgICAgdGhpcy5vblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuaXNvbGF0ZSA/IHVuZGVmaW5lZCA6IHRoaXMuY29uZmlndXJhdGlvblN0b3JlLm9uVW5BdXRob3Jpc2VkRGVmYXVsdFN0cmF0ZWd5O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHNldERlZmF1bHRPbkF1dGhvcml6ZWRTdHJhdGVneShuYW1lOiBzdHJpbmcgfCAncmVtb3ZlJyB8ICdzaG93Jyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc29sYXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuZ2V0RGVmaW5lZFN0cmF0ZWd5KG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uU3RvcmUub25BdXRob3Jpc2VkRGVmYXVsdFN0cmF0ZWd5ID0gdGhpcy5nZXREZWZpbmVkU3RyYXRlZ3kobmFtZSk7XG4gICAgICAgICAgICB0aGlzLm9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuY29uZmlndXJhdGlvblN0b3JlLm9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXREZWZhdWx0T25VbmF1dGhvcml6ZWRTdHJhdGVneShuYW1lOiBzdHJpbmcgfCAncmVtb3ZlJyB8ICdzaG93Jyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc29sYXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uVW5BdXRob3Jpc2VkRGVmYXVsdFN0cmF0ZWd5ID0gdGhpcy5nZXREZWZpbmVkU3RyYXRlZ3kobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb25TdG9yZS5vblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuZ2V0RGVmaW5lZFN0cmF0ZWd5KG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5vblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuY29uZmlndXJhdGlvblN0b3JlLm9uVW5BdXRob3Jpc2VkRGVmYXVsdFN0cmF0ZWd5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFBlcm1pc3Npb25TdHJhdGVneShrZXk6IHN0cmluZywgZnVuYzogU3RyYXRlZ3lGdW5jdGlvbik6IHZvaWQge1xuICAgICAgICB0aGlzLnN0cmF0ZWdpZXNTb3VyY2UudmFsdWVba2V5XSA9IGZ1bmM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFN0cmF0ZWd5KGtleTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmF0ZWdpZXNTb3VyY2UudmFsdWVba2V5XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWxsU3RyYXRlZ2llcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyYXRlZ2llc1NvdXJjZS52YWx1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldERlZmluZWRTdHJhdGVneShuYW1lOiBzdHJpbmcgfCAncmVtb3ZlJyB8ICdzaG93Jykge1xuICAgICAgICBpZiAodGhpcy5zdHJhdGVnaWVzU291cmNlLnZhbHVlW25hbWVdIHx8IHRoaXMuaXNQcmVkZWZpbmVkU3RyYXRlZ3kobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyAnICR7bmFtZX0gJyBzdHJhdGVneSBpcyBmb3VuZCBwbGVhc2UgZGVmaW5lIG9uZWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1ByZWRlZmluZWRTdHJhdGVneShzdHJhdGVneTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBzdHJhdGVneSA9PT0gTmd4UGVybWlzc2lvbnNQcmVkZWZpbmVkU3RyYXRlZ2llcy5TSE9XIHx8IHN0cmF0ZWd5ID09PSBOZ3hQZXJtaXNzaW9uc1ByZWRlZmluZWRTdHJhdGVnaWVzLlJFTU9WRTtcbiAgICB9XG5cbn1cbiJdfQ==